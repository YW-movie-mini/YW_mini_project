# -*- coding: utf-8 -*-
"""movie_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z7ysdT-Ux3r9NzPVtp5Y040Hu3y8YgYW
"""

import pandas as pd   # pandas 모듈을 약어 pd로 import

df1 = pd.read_excel('movie_box_office.xls', sheet_name='KOBIS_역대_박스오피스(통합전산망_집계_기준)_202')
df1 # df1은 변수

df1['영화명'] = df1['영화명'].astype(str) # 영화명 정렬 시 str과 int간 정렬 불가 오류가 발생해서, '영화명' 컬럼 전체를 str 타입으로 변환함
df1 = df1.sort_values('영화명') # '영화명' 컬럼을 오름차순으로 정렬
df1

df2 = pd.read_excel('movie_info_list.xls', sheet_name='영화정보 리스트')
df2

df2 = df2.sort_values('영화명') # '영화명' 컬럼을 오름차순으로 정렬
df2

movie = pd.merge(df1, df2 , on="영화명")  # 데이터프레임 df1와 df2를 공통된 컬럼인 '영화명'을 기준으로 병합. 공백 데이터는 NaN으로 채워짐.
movie.head()  # .head() 는 데이터프레임의 처음부터 5행까지만 출력

movie = movie.sort_values('관객수', ascending=False) # 데이터프레임을 '관객수' 컬럼 기준으로 내림차순 정렬
movie.head()

movie = movie.reset_index(drop=True)  # 인덱스 리셋하기
movie.head()

movie['제작상태'].unique()  # .unique()로 '제작상태' 컬럼 구성 원소 중복되는 값 없이 출력

movie['감독'].unique()

movie['장르'].unique()  # '드라마,공포(호러),스릴러', '드라마,스릴러', '스릴러,드라마'와 같이 중복된 값을 확인

# .drop()으로 중복되거나 데이터분석에 필요없다고 판단한 컬럼 삭제. axis=1 일 경우, 컬럼(열) 삭제. default는 axis=0으로 로우(행) 삭제.
movie = movie.drop(['순위','매출액','대표국적','국적','상영횟수','배급사','영화명(영문)','제작연도','제작사'], axis=1)

movie.head()

type(movie)   # 데이터프레임 movie의 타입은 데이터프레임 타입

movie.loc[1,['장르']]

type(movie.loc[1,['장르']]) # 시리즈 타입.
# 머신러닝 교재 내용
# 시리즈(Series)와 데이터프레임(DataFrame)은 서로 다른 종류의 데이터를 한곳에 담는 그릇(컨테이너) 역할을 한다. 
# 다만, 시리즈는 1차원 배열이고, 데이터프레임은 2차원 배열이라는 점에서 차이가 있다.
# 시리즈의 인덱스(index) 데이터 값(value)와 일대일 대응이 된다. 이런 관점에서 키(k)와 값(v)이 '{k:v}' 형태로
# 짝을 이루는 파이썬 딕셔너리(dictionary)와 비슷한 구조를 갖는다고 볼 수 있다. 딕셔너리를 시리즈로 변환할 수 있다.

# for i in range(len(movie.index)):
for i in range(0, 5):
  print(movie.loc[i,['장르']])

movie.loc[1,['장르']] == '코미디'

# for i in range(movie.shape[0]):
  # movie.장르[i] = str(movie.장르[i]).replace('/', ',')

for i in range(movie.shape[0]): # 행 개수만큼 276회 반복
  movie.장르[i] = str(movie.장르[i]).split(',') # 장르 데이터를 ','와 '/'를 기준으로 나눠서 리스트로 변경. '|' 는 or 기호

movie.장르[0]

movie.head()

movie.장르[0][1]

movie

